@page "/bills"

@inject BillService BillService
@inject NavigationManager NavigationManager

<div>
    <div>
      <div class="p-2">
    <div>
        <div class="d-flex gap-3">
            <div>
                <select @bind="client.BarberName" class="form-control">
                    <option value="" disabled selected>Select Barber Name</option>
                            @foreach (var barber in barbers)
                            {
                            <option value="@barber">@barber</option>
                            }
                </select>

            </div>

            <div>
                <input type="text" class="form-control"
                       @bind="client.FirstName" placeholder="Customer Name" />

            </div>
            <div>
                <input type="email" class="form-control"
                       @bind="client.Phone" placeholder="Customer Phone" />

            </div>
        </div>
    </div>


</div>
        <div class="d-flex align-items-center justify-content-between">
            <div>
                <span>Total: </span>
                <span>$ @BillService.TotalAmount</span>
            </div>

            <div class="d-flex align-items-center mx-2">
                <input type="number" id="amountPaid" class="form-control me-2" @bind="amountPaid" placeholder="Amount Paid" />
                <button @onclick="CalculateChange" class="btn btn-outline-primary">
                    Return
                </button>
                <button class="btn btn-outline-danger mx-2" @onclick="ClearAllItems">
                    <span>Clear</span>
                </button>
            </div>
        </div>

        <div class="mt-3">
            @if (changeAmount.HasValue)
            {
                        <p class="mb-1 text-secondary">
                            Change to Return: <span class="text-primary">@changeAmount.Value.ToString("C")</span>
                        </p>
            }
            @if (isError)
            {
                        <p class="mb-0 text-danger">
                    @errorMessage
                        </p>
            }
        </div>
    </div>

    <div class="border p-5" style="max-height:70vh; min-height:60vh; overflow-y:scroll">
        <table class="table small">
            <thead>
                <tr>
                    <th>Item Name</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (BillService.SelectedItems != null)
                {
                    @foreach (var item in BillService.SelectedItems)
                    {
                                        <tr>
                                            <td>@item.Name</td>
                                            <td>@item.Quantity</td>
                                            <td>@item.Price</td>
                                            <td>
                                                <button class="btn btn-outline-primary" @onclick="() => IncreaseQuantity(item)">
                                                    <i class="bi bi-plus"></i>
                                                </button>
                                                <button class="btn btn-outline-primary" @onclick="() => DecreaseQuantity(item)">
                                                    <i class="bi bi-dash"></i>
                                                </button>
                                                <button class="btn btn-outline-danger delete-button" @onclick="() => RemoveItem(item)">
                                                    <i class="bi bi-trash3"></i>
                                                </button>
                                            </td>
                                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private decimal amountPaid;
    private decimal? changeAmount;
    private bool isError = false;
    private string? errorMessage;

    private Client client = new Client();
       private List<string> barbers = new List<string> { "John", "Jane", "Alex", "Sam", "Moiz", "Shoaib" };

    public class Client
    {
        public string? FirstName { get; set; }
        public string? Phone { get; set; }
        public string? BarberName { get; set; }
    }



    private void CalculateChange()
    {
        isError = false;
        errorMessage = string.Empty;

        if (amountPaid < BillService.TotalAmount)
        {
            isError = true;
            errorMessage = "Amount paid cannot be less than the total amount.";
            changeAmount = null;
        }
        else if (amountPaid <= 0)
        {
            isError = true;
            errorMessage = "Amount paid must be greater than zero.";
            changeAmount = null;
        }
        else
        {
            changeAmount = amountPaid - BillService.TotalAmount;
        }
    }

    protected override void OnInitialized()
    {
        BillService.OnChange += async () => await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        BillService.OnChange -= async () => await InvokeAsync(StateHasChanged);
    }

    private void IncreaseQuantity(RateItem item)
    {
        item.Quantity++;
        item.Price = item.BasePrice * item.Quantity;
        BillService.UpdateItem(item);
    }

    private void DecreaseQuantity(RateItem item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
            item.Price = item.BasePrice * item.Quantity;
            BillService.UpdateItem(item);
        }
    }

    private void RemoveItem(RateItem item)
    {
        BillService.RemoveItem(item);
    }

    private void ClearAllItems()
    {
        BillService.ClearAllItems();
    }
}