@page "/product"
@using Bill_Generate.Models
@using System.Text.Json
@using System.IO
@inject BillService BillService
@inject NavigationManager Navigation

<div class="container mt-4">
    <div>
        <EditForm Model="newProduct" OnValidSubmit="AddProduct">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="col-md-2">
                    <InputText id="productTitle" class="form-control" placeholder="Enter Product Title" @bind-Value="newProduct.ProductTitle" />
                </div>
                <div class="col-md-2">
                    <InputText id="productCode" class="form-control" placeholder="Enter Product Code" @bind-Value="newProduct.ProductCode" />
                </div>
                <div class="col-md-2">
                    <InputNumber id="productPrice" class="form-control" placeholder="Enter Price" @bind-Value="newProduct.ProductPrice" />
                </div>
                <div class="col-md-2">
                    <InputSelect id="productImageUrl" class="form-control" @bind-Value="newProduct.ImageUrl">
                        <option value="">Select Image</option>
                        @foreach (var imgUrl in ImageUrls)

                        {
                            <option value="@imgUrl">@imgUrl</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-2">
                    <div class="form-check form-switch">
                        <InputCheckbox @bind-Value="newProduct.IsActive" class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked" />
                        <label class="form-check-label" for="flexSwitchCheckChecked">Is Active</label>
                    </div>
                </div>
                <div class="col-md-2">
                    <button type="submit" class="btn btn-success">Add Product</button>
                </div>
            </div>
        </EditForm>
    </div>

    <div class="row mt-5">
        <div class="col-md-12">
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Code</th>
                        <th>Price</th>
                        <th>Status</th>
                        <th>Image</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (ProductList.Any())

                    {
                        @foreach (var product in ProductList)

                        {
                            <tr>
                                <td>@product.ProductTitle</td>
                                <td>@product.ProductCode</td>
                                <td>@product.ProductPrice.ToString("C")</td>
                                <td>
                                    <input type="checkbox" class="form-check-input" checked="@product.IsActive" @onchange="(e) => ToggleActiveStatus(product, e.Value)" />
                                    @(product.IsActive ? "Active" : "Inactive")
                                </td>
                                <td>
                                    <img src="@product.ImageUrl" alt="@product.ProductTitle" style="width: 50px; height: 50px;" />
                                </td>
                                <td>
                                    <button class="btn btn-danger" @onclick="() => DeleteProduct(product)" disabled="@product.IsActive">Delete</button>
                                </td>
                            </tr>
                        }
                    }

                    else

                    {
                        <tr>
                            <td colspan="6">No products available.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private List<Product> ProductList { get; set; } = new List<Product>();

    private Product newProduct { get; set; } = new Product();

    private List<string> ImageUrls { get; set; } = new List<string>
    {
        "/images/buzzcut.png",
        "/images/face.png",
        "/images/hair-color.png",
        "/images/facial.png",
        "/images/hair-spray.png",
        "/images/hair-styling.png",
        "/images/heat.png",
        "/images/manicure1.png",
        "/images/message-head.png",
        "/images/scissor.png",
        "/images/shave (2).png",
        "/images/hair-color.png",
        "/images/spray.png",
        "/images/spray1.png",
        "/images/trim-haircut.png",
        "/images/face.png",
        // Add more image paths here
    };



    protected override async Task OnInitializedAsync()

    {

        await LoadProducts();

        UpdateRateItems(); // Ensure RateItems are updated

    }



    private async Task AddProduct()

    {

        // Add product to the product list

        ProductList.Add(newProduct);



        // Create a corresponding RateItem and add it to the BillService's RateItems list

        var rateItem = new RateItem
            {
                Name = newProduct.ProductTitle,
                BasePrice = newProduct.ProductPrice,
                ImageUrl = newProduct.ImageUrl, // Selected image URL
                IsActive = newProduct.IsActive
            };



        // Add the rate item to the list in BillService

        BillService.AddRateItem(rateItem);



        // Save the product list to the file

        await SaveProductsToFile();



        // Reset the form

        newProduct = new Product();

    }



    private async Task DeleteProduct(Product product)

    {

        if (product != null && !string.IsNullOrEmpty(product.ProductTitle))

        {

            // Remove the product from the product list

            ProductList.Remove(product);



            // Remove the corresponding rate item from the BillService

            BillService.RemoveRateItem(product.ProductTitle);



            // Save the updated product list to the file

            await SaveProductsToFile();



            // Ensure RateItems are updated

            UpdateRateItems();

        }

        else

        {

            // Handle the case where product or ProductTitle is null

            Console.WriteLine("Product or ProductTitle is null. Cannot remove the product.");

        }

    }



    private async Task ToggleActiveStatus(Product product, object? value)

    {

        if (value is bool boolValue)

        {

            product.IsActive = boolValue;



            // Update the corresponding RateItem's active status

            var rateItem = BillService.RateItems.FirstOrDefault(x => x.Name == product.ProductTitle);

            if (rateItem != null)

            {

                rateItem.IsActive = boolValue;

            }



            await SaveProductsToFile();

            UpdateRateItems();

        }

    }



    private async Task LoadProducts()

    {

        var filePath = Path.Combine(Directory.GetCurrentDirectory(), "Data/Product.json");

        if (File.Exists(filePath))

        {

            var existingProductsJson = await File.ReadAllTextAsync(filePath);

            ProductList = JsonSerializer.Deserialize<List<Product>>(existingProductsJson) ?? new List<Product>();

        }

        else

        {

            Console.WriteLine("Product.json file not found.");

        }

    }



    private async Task SaveProductsToFile()

    {

        var filePath = Path.Combine(Directory.GetCurrentDirectory(), "Data/Product.json");

        var productListJson = JsonSerializer.Serialize(ProductList);

        await File.WriteAllTextAsync(filePath, productListJson);

    }



    private void UpdateRateItems()

    {

        // Update RateItems list to ensure only active items are present

        var activeItems = ProductList.Where(p => p.IsActive)

                                     .Select(p => new RateItem
                                         {
                                             Name = p.ProductTitle,
                                             BasePrice = p.ProductPrice,
                                             ImageUrl = p.ImageUrl,
                                             IsActive = p.IsActive
                                         })

                                     .ToList();



        BillService.RateItems.Clear();

        foreach (var item in activeItems)

        {

            BillService.RateItems.Add(item);

        }

    }
}