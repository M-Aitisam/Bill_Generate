@page "/product"
@using Bill_Generate.Models
@using System.Text.Json
@using System.IO

<div class="container mt-4">
    <div>
        <EditForm Model="newProduct" OnValidSubmit="AddProduct">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="col-md-2">
                    <InputText id="productTitle" class="form-control" placeholder="Enter Product Title" @bind-Value="newProduct.ProductTitle" />
                </div>
                <div class="col-md-2">
                    <InputText id="productCode" class="form-control" placeholder="Enter Product Code" @bind-Value="newProduct.ProductCode" />
                </div>
                <div class="col-md-2">
                    <InputNumber id="productPrice" class="form-control" placeholder="Enter Price" @bind-Value="newProduct.ProductPrice" />
                </div>
                <div class="col-md-2">
                    <div class="form-check form-switch">
                        <InputCheckbox @bind-Value="newProduct.IsActive" class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked" />
                        <label class="form-check-label" for="flexSwitchCheckChecked">Is Active</label>
                    </div>
                </div>
                <div class="col-md-2">
                    <button type="submit" class="btn btn-success">Add Product</button>
                </div>
            </div>
        </EditForm>
    </div>

    <div class="row mt-5">
        <div class="col-md-12">
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Code</th>
                        <th>Price</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (ProductList.Any())
                    {
                        @foreach (var product in ProductList)
                        {
                            <tr>
                                <td>@product.ProductTitle</td>
                                <td>@product.ProductCode</td>
                                <td>@product.ProductPrice.ToString("C")</td>
                                <td>
                                    <input type="checkbox" class="form-check-input" @bind="product.IsSelected" /> @(product.IsActive ? "Active" : "Inactive")
                                </td>
                                <td>
                                    <button class="btn btn-danger" @onclick="() => DeleteProduct(product)">Delete</button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5">No products available.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private List<Product> ProductList { get; set; } = new List<Product>();
    private Product newProduct { get; set; } = new Product();

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task AddProduct()
    {
        // Add the new product to the product list
        ProductList.Add(newProduct);
        await SaveProductsToFile();
        // Reset the form
        newProduct = new Product();
    }

    private async Task DeleteProduct(Product product)
    {
        // Remove the product from the list
        ProductList.Remove(product);
        await SaveProductsToFile();
    }

    private async Task LoadProducts()
    {
        var filePath = Path.Combine(Directory.GetCurrentDirectory(), "Data/Product.json");
        if (File.Exists(filePath))
        {
            var existingProductsJson = await File.ReadAllTextAsync(filePath);
            ProductList = JsonSerializer.Deserialize<List<Product>>(existingProductsJson) ?? new List<Product>();
        }
        else
        {
            // Handle file not found scenario
            Console.WriteLine("Product.json file not found.");
        }
    }

    private async Task SaveProductsToFile()
    {
        var filePath = Path.Combine(Directory.GetCurrentDirectory(), "Data/Product.json");
        var productListJson = JsonSerializer.Serialize(ProductList);
        await File.WriteAllTextAsync(filePath, productListJson);
    }
}
