@page "/clientinformation"
@inject BillService BillService
@inject IOptions<EmailSettings> EmailSettings
@using System.Net;
@using System.Net.Mail;
@using Microsoft.Extensions.Options
@using Bill_Generate.Models

<div class="p-2">
    <div>
        <div class="d-flex gap-3">
            <div>
                <select @bind="client.BarberName" class="form-control">
                    <option value="" disabled selected>Select Barber Name</option>
                    @foreach (var barber in barbers)
                    {
                        <option value="@barber">@barber</option>
                    }
                </select>
                @if (validationErrors.ContainsKey("BarberName"))
                {
                    <span class="text-danger">@validationErrors["BarberName"]</span>
                }
            </div>

            <div>
                <input type="text" class="form-control"
                       @bind="client.FirstName" placeholder="Customer Name" />
                @if (validationErrors.ContainsKey("FirstName"))
                {
                    <span class="text-danger">@validationErrors["FirstName"]</span>
                }
            </div>
            <div>
                <input type="email" class="form-control"
                       @bind="client.Email" placeholder="Customer Email" />
                @if (validationErrors.ContainsKey("Email"))
                {
                    <span class="text-danger">@validationErrors["Email"]</span>
                }
            </div>
        </div>
    </div>
    <div class="mt-3">
        <button class="btn btn-primary" @onclick="SendMessage">Send Message</button>
    </div>
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3">
            @successMessage
        </div>
    }
</div>

@code {
    private Client client = new Client();
    private Dictionary<string, string> validationErrors = new Dictionary<string, string>();
    private string? successMessage;

    private List<string> barbers = new List<string> { "John", "Jane", "Alex", "Sam", "Moiz", "Shoaib" };

    public class Client
    {
        public string? FirstName { get; set; }
        public string? Email { get; set; }
        public string? BarberName { get; set; }
    }
    private void SendMessage()
    {
        validationErrors.Clear();

        if (string.IsNullOrEmpty(client.BarberName))
        {
            validationErrors["BarberName"] = "Please select a barber name.";
        }

        if (string.IsNullOrEmpty(client.FirstName))
        {
            validationErrors["FirstName"] = "Enter your name.";
        }

        if (string.IsNullOrEmpty(client.Email))
        {
            validationErrors["Email"] = "Enter your  email.";
        }

        if (validationErrors.Count == 0)
        {
            try
            {
                var smtpSettings = EmailSettings.Value;

                using (var message = new MailMessage())
                {
                    message.From = new MailAddress(smtpSettings.Username ?? throw new InvalidOperationException("Email username not set"));
                    message.To.Add(new MailAddress(client.Email ?? throw new InvalidOperationException("Customer email not set")));
                    message.Subject = "Service Confirmation";
                    message.Body = $"Dear {client.FirstName},\n\nYour appointment with {client.BarberName} is confirmed.";

                    using (var smtpClient = new SmtpClient(smtpSettings.SmtpServer, smtpSettings.SmtpPort))
                    {
                        smtpClient.Credentials = new NetworkCredential(smtpSettings.Username, smtpSettings.Password);
                        smtpClient.EnableSsl = true;
                        smtpClient.Send(message);
                    }
                }

                successMessage = $"Message sent to {client.Email} successfully!";
            }
            catch (SmtpException smtpEx)
            {
                validationErrors["Email"] = $"SMTP Error: {smtpEx.Message}";
            }
            catch (Exception ex)
            {
                validationErrors["Email"] = $"Failed to send email: {ex.Message}";
            }
        }
    }

    protected override void OnInitialized()
    {
        BillService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        BillService.OnChange -= StateHasChanged;
    }
}
